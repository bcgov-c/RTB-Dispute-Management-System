// <auto-generated />
using System;
using CM.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CM.Data.Model.Migrations
{
    [DbContext(typeof(CaseManagementContext))]
    [Migration("20180529121329_AddFiles")]
    partial class AddFiles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CM.Data.Model.AccessCodeExcludeWord", b =>
                {
                    b.Property<int>("ExcludeWordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExcludeWord")
                        .HasMaxLength(6);

                    b.HasKey("ExcludeWordId");

                    b.ToTable("AccessCodeExcludeWords");
                });

            modelBuilder.Entity("CM.Data.Model.Amendment", b =>
                {
                    b.Property<int>("AmendmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AmendmentChangeHtml")
                        .IsRequired();

                    b.Property<byte>("AmendmentChangeType");

                    b.Property<string>("AmendmentDescription")
                        .HasMaxLength(255);

                    b.Property<int?>("AmendmentFileId");

                    b.Property<string>("AmendmentPendingData");

                    b.Property<byte>("AmendmentStatus");

                    b.Property<int?>("AmendmentSubmitterId");

                    b.Property<string>("AmendmentTitle")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<byte>("AmendmentTo");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AmendmentId");

                    b.HasIndex("AmendmentSubmitterId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("CM.Data.Model.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiCallData")
                        .IsRequired();

                    b.Property<string>("ApiCallType")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ApiErrorResponse");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ApiResponse")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ChangeDate");

                    b.Property<Guid?>("DisputeGuid");

                    b.Property<int>("SubmittedBy");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CM.Data.Model.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte?>("ClaimCode");

                    b.Property<int>("ClaimGroupId");

                    b.Property<byte?>("ClaimSource");

                    b.Property<byte?>("ClaimStatus");

                    b.Property<string>("ClaimTitle")
                        .HasMaxLength(150);

                    b.Property<byte?>("ClaimType");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsAmended");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ClaimId");

                    b.HasIndex("ClaimGroupId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("CM.Data.Model.ClaimDetail", b =>
                {
                    b.Property<int>("ClaimDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("DescriptionBy");

                    b.Property<string>("Impact")
                        .HasMaxLength(750);

                    b.Property<bool?>("IsAmended");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Location")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("NoticeDate");

                    b.Property<byte?>("NoticeMethod");

                    b.Property<string>("WhenAware")
                        .HasMaxLength(255);

                    b.HasKey("ClaimDetailId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DescriptionBy");

                    b.ToTable("ClaimDetails");
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroup", b =>
                {
                    b.Property<int>("ClaimGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ClaimGroupId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("ClaimGroups");
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroupParticipant", b =>
                {
                    b.Property<int>("ClaimGroupParticipantId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClaimGroupId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<byte>("GroupParticipantRole");

                    b.Property<int?>("GroupPrimaryContactId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ParticipantId");

                    b.HasKey("ClaimGroupParticipantId");

                    b.HasIndex("ClaimGroupId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ClaimGroupParticipants");
                });

            modelBuilder.Entity("CM.Data.Model.Dispute", b =>
                {
                    b.Property<int>("DisputeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<byte?>("CreationMethod");

                    b.Property<Guid?>("CrossAppDisputeGuid");

                    b.Property<int?>("CrossAppFileNumber");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<byte?>("DisputeSubType");

                    b.Property<byte?>("DisputeType");

                    b.Property<byte?>("DisputeUrgency");

                    b.Property<byte?>("EvidenceOverride");

                    b.Property<int?>("FileNumber");

                    b.Property<int?>("InitialPaymentBy");

                    b.Property<DateTime?>("InitialPaymentDate");

                    b.Property<bool?>("IsAmended");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("OriginalNoticeDate");

                    b.Property<bool?>("OriginalNoticeDelivered");

                    b.Property<int?>("OriginalNoticeId");

                    b.Property<int?>("PetDamageDepositAmount");

                    b.Property<string>("RentPaymentInterval")
                        .HasMaxLength(100);

                    b.Property<int?>("SecurityDepositAmount");

                    b.Property<int?>("SubmittedBy");

                    b.Property<DateTime?>("SubmittedDate");

                    b.Property<string>("TenancyAddress")
                        .HasMaxLength(80);

                    b.Property<string>("TenancyCity")
                        .HasMaxLength(50);

                    b.Property<string>("TenancyCountry")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TenancyEndDate");

                    b.Property<byte?>("TenancyEnded");

                    b.Property<byte?>("TenancyGeozoneId");

                    b.Property<DateTime?>("TenancyStartDate");

                    b.Property<string>("TenancyZipPostal")
                        .HasMaxLength(7);

                    b.HasKey("DisputeId");

                    b.ToTable("Disputes");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeStatus", b =>
                {
                    b.Property<int>("DisputeStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DisputeGuid");

                    b.Property<int?>("DurationSeconds");

                    b.Property<int?>("Owner");

                    b.Property<byte?>("Process");

                    b.Property<byte?>("Stage");

                    b.Property<byte>("Status");

                    b.Property<string>("StatusNote")
                        .HasMaxLength(255);

                    b.Property<string>("StatusSetBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StatusStartDate");

                    b.HasKey("DisputeStatusId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("DisputeStatuses");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeUser", b =>
                {
                    b.Property<int>("DisputeUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ParticipantId");

                    b.Property<int>("SystemUserId");

                    b.HasKey("DisputeUserId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("DisputeUsers");
                });

            modelBuilder.Entity("CM.Data.Model.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<Guid>("FileGuid");

                    b.Property<string>("FileMimeType")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("FileSize");

                    b.Property<byte?>("FileStatus");

                    b.Property<string>("FileTitle")
                        .HasMaxLength(100);

                    b.Property<byte>("FileType");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("FileId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("File");
                });

            modelBuilder.Entity("CM.Data.Model.FileDescription", b =>
                {
                    b.Property<int>("FileDescriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<byte?>("DecisionReference");

                    b.Property<string>("Description")
                        .HasMaxLength(750);

                    b.Property<int?>("DescriptionBy");

                    b.Property<byte>("DescriptionCategory");

                    b.Property<byte?>("DescriptionCode");

                    b.Property<bool?>("Discussed");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<byte?>("FileMethod");

                    b.Property<byte?>("FileStatus");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("RemedyId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("FileDescriptionId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DescriptionBy");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("RemedyId");

                    b.ToTable("FileDescription");
                });

            modelBuilder.Entity("CM.Data.Model.Hearing", b =>
                {
                    b.Property<int>("HearingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<int?>("DisputeId");

                    b.Property<byte?>("HearingComplexity");

                    b.Property<string>("HearingDetails")
                        .HasMaxLength(1500);

                    b.Property<int?>("HearingDuration");

                    b.Property<DateTime?>("HearingEnd");

                    b.Property<string>("HearingLocation")
                        .HasMaxLength(255);

                    b.Property<byte?>("HearingMethod");

                    b.Property<int?>("HearingOwner");

                    b.Property<DateTime?>("HearingStart");

                    b.Property<byte?>("HearingType");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModeratorDialCode")
                        .HasMaxLength(15);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ParticipantDialCode")
                        .HasMaxLength(15);

                    b.Property<string>("PrimaryDialInNumber")
                        .HasMaxLength(20);

                    b.Property<string>("PrimaryDialInTitle")
                        .HasMaxLength(100);

                    b.Property<string>("SecondaryDialInNumber")
                        .HasMaxLength(20);

                    b.Property<string>("SecondaryDialInTitle")
                        .HasMaxLength(100);

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1500);

                    b.Property<bool?>("UseCustomSchedule");

                    b.Property<bool?>("UseSpecialInstructions");

                    b.Property<byte>("VersionNumber");

                    b.HasKey("HearingId");

                    b.HasIndex("DisputeId");

                    b.ToTable("Hearings");
                });

            modelBuilder.Entity("CM.Data.Model.HearingParticipation", b =>
                {
                    b.Property<int>("HearingParticipationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("HearingId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OtherParticipantName")
                        .HasMaxLength(255);

                    b.Property<int?>("ParticipantId");

                    b.Property<string>("ParticipationComment")
                        .HasMaxLength(500);

                    b.Property<byte?>("ParticipationStatus");

                    b.HasKey("HearingParticipationId");

                    b.HasIndex("HearingId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("HearingParticipations");
                });

            modelBuilder.Entity("CM.Data.Model.IntakeQuestion", b =>
                {
                    b.Property<int>("IntakeQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DisputeGuid");

                    b.Property<byte>("GroupId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("QuestionAnswer")
                        .HasMaxLength(6);

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("IntakeQuestionId");

                    b.HasIndex("DisputeGuid", "QuestionName")
                        .IsUnique();

                    b.ToTable("IntakeQuestions");
                });

            modelBuilder.Entity("CM.Data.Model.LinkedFile", b =>
                {
                    b.Property<int>("LinkedFileId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Accepted");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<int>("FileDescriptionId");

                    b.Property<int>("FileId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LinkedFileId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("FileDescriptionId");

                    b.HasIndex("FileId");

                    b.ToTable("LinkedFile");
                });

            modelBuilder.Entity("CM.Data.Model.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AcceptedTOU");

                    b.Property<DateTime?>("AcceptedTOUDate");

                    b.Property<string>("AccessCode")
                        .HasMaxLength(10);

                    b.Property<string>("Address")
                        .HasMaxLength(125);

                    b.Property<string>("BusinessContactFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("BusinessContactLastName")
                        .HasMaxLength(70);

                    b.Property<string>("BusinessName")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<byte?>("CountryId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("DisputeGuid");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool?>("EmailVerified");

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsAmended");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(70);

                    b.Property<string>("MailAddres")
                        .HasMaxLength(125);

                    b.Property<string>("MailCity")
                        .HasMaxLength(50);

                    b.Property<string>("MailCountry")
                        .HasMaxLength(50);

                    b.Property<string>("MailPostalZip")
                        .HasMaxLength(15);

                    b.Property<string>("MailProvinceState")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("NoEmail");

                    b.Property<byte?>("PackageDeliveryMethod");

                    b.Property<byte>("ParticipantStatus");

                    b.Property<byte?>("ParticipantType");

                    b.Property<string>("PostalZip")
                        .HasMaxLength(15);

                    b.Property<byte?>("PrimaryContactMethod");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(15);

                    b.Property<string>("PrimaryPhoneExtension")
                        .HasMaxLength(4);

                    b.Property<byte?>("PrimaryPhoneType");

                    b.Property<bool?>("PrimaryPhoneVerified");

                    b.Property<string>("ProvinceState")
                        .HasMaxLength(50);

                    b.Property<byte?>("ProvinceStateId");

                    b.Property<string>("SecondaaryPhone")
                        .HasMaxLength(15);

                    b.Property<byte?>("SecondaryContactMethod");

                    b.Property<string>("SecondaryPhoneExtension")
                        .HasMaxLength(4);

                    b.Property<byte?>("SecondaryPhoneType");

                    b.Property<bool?>("SecondaryPhoneVerified");

                    b.Property<int?>("SystemUserId");

                    b.HasKey("ParticipantId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("SystemUserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("CM.Data.Model.Remedy", b =>
                {
                    b.Property<int>("RemedyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsAmended");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<byte?>("RemedySource");

                    b.Property<byte?>("RemedyStatus");

                    b.Property<string>("RemedyTitle")
                        .HasMaxLength(150);

                    b.Property<byte?>("RemedyType");

                    b.HasKey("RemedyId");

                    b.HasIndex("ClaimId");

                    b.ToTable("Remedies");
                });

            modelBuilder.Entity("CM.Data.Model.RemedyDetail", b =>
                {
                    b.Property<int>("RemedyDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("DescriptionBy");

                    b.Property<bool?>("IsAmended");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RemedyId");

                    b.HasKey("RemedyDetailId");

                    b.HasIndex("DescriptionBy");

                    b.HasIndex("RemedyId");

                    b.ToTable("RemedyDetails");
                });

            modelBuilder.Entity("CM.Data.Model.SystemUser", b =>
                {
                    b.Property<int>("SystemUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AcceptsTextMessages");

                    b.Property<string>("AccountEmail")
                        .HasMaxLength(100);

                    b.Property<string>("AccountMobile")
                        .HasMaxLength(15);

                    b.Property<bool>("AdminAccess");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password")
                        .HasMaxLength(250);

                    b.Property<int>("SystemUserRoleId");

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SystemUserId");

                    b.HasIndex("SystemUserRoleId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("CM.Data.Model.SystemUserRole", b =>
                {
                    b.Property<int>("SystemUserRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleDescritption")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SessionDuration");

                    b.HasKey("SystemUserRoleId");

                    b.ToTable("SystemUserRoles");
                });

            modelBuilder.Entity("CM.Data.Model.Amendment", b =>
                {
                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("Amendments")
                        .HasForeignKey("AmendmentSubmitterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Amendments")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.Claim", b =>
                {
                    b.HasOne("CM.Data.Model.ClaimGroup", "ClaimGroup")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.ClaimDetail", b =>
                {
                    b.HasOne("CM.Data.Model.Claim", "Claim")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("ClaimId");

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("DescriptionBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroup", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("ClaimGroups")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroupParticipant", b =>
                {
                    b.HasOne("CM.Data.Model.ClaimGroup", "ClaimGroup")
                        .WithMany("ClaimGroupParticipants")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("ClaimGroupParticipants")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("ClaimGroupParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.DisputeStatus", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeStatuses")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.DisputeUser", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeUsers")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("DisputeUsers")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("DisputeUsers")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.File", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Files")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.FileDescription", b =>
                {
                    b.HasOne("CM.Data.Model.Claim", "Claim")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("ClaimId");

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("DescriptionBy");

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Remedy", "Remedy")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("RemedyId");
                });

            modelBuilder.Entity("CM.Data.Model.Hearing", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Hearings")
                        .HasForeignKey("DisputeId");
                });

            modelBuilder.Entity("CM.Data.Model.HearingParticipation", b =>
                {
                    b.HasOne("CM.Data.Model.Hearing", "Hearing")
                        .WithMany("HearingParticipations")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("HearingParticipations")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("CM.Data.Model.IntakeQuestion", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("IntakeQuestions")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.LinkedFile", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("LinkedFiles")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.FileDescription", "FileDescription")
                        .WithMany("LinkedFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CM.Data.Model.File", "File")
                        .WithMany("LinkedFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.Participant", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Participants")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("Participants")
                        .HasForeignKey("SystemUserId");
                });

            modelBuilder.Entity("CM.Data.Model.Remedy", b =>
                {
                    b.HasOne("CM.Data.Model.Claim", "Claim")
                        .WithMany("Remedies")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.RemedyDetail", b =>
                {
                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("RemedyDetails")
                        .HasForeignKey("DescriptionBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CM.Data.Model.Remedy", "Remedy")
                        .WithMany("RemedyDetails")
                        .HasForeignKey("RemedyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CM.Data.Model.SystemUser", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUserRole", "SystemUserRole")
                        .WithMany()
                        .HasForeignKey("SystemUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
