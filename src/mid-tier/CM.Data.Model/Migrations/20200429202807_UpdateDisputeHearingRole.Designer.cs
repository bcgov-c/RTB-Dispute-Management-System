// <auto-generated />
using System;
using CM.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CM.Data.Model.Migrations
{
    [DbContext(typeof(CaseManagementContext))]
    [Migration("20200429202807_UpdateDisputeHearingRole")]
    partial class UpdateDisputeHearingRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CM.Data.Model.AccessCodeExcludeWord", b =>
                {
                    b.Property<int>("ExcludeWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ExcludeWord")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.HasKey("ExcludeWordId");

                    b.ToTable("AccessCodeExcludeWords");
                });

            modelBuilder.Entity("CM.Data.Model.Amendment", b =>
                {
                    b.Property<int>("AmendmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AmendFileDescriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("AmendmentChangeHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("AmendmentChangeType")
                        .HasColumnType("smallint");

                    b.Property<string>("AmendmentDescription")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("AmendmentFileId")
                        .HasColumnType("integer");

                    b.Property<string>("AmendmentPendingData")
                        .HasColumnType("text");

                    b.Property<byte?>("AmendmentSource")
                        .HasColumnType("smallint");

                    b.Property<byte>("AmendmentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<int?>("AmendmentSubmitterId")
                        .HasColumnType("integer");

                    b.Property<string>("AmendmentTitle")
                        .IsRequired()
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<byte>("AmendmentTo")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte?>("IncludeInDecision")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsInternallyInitiated")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("NoticeId")
                        .HasColumnType("integer");

                    b.HasKey("AmendmentId");

                    b.HasIndex("AmendFileDescriptionId");

                    b.HasIndex("AmendmentSubmitterId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("NoticeId");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("CM.Data.Model.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ApiCallData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiCallType")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ApiErrorResponse")
                        .HasColumnType("text");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApiResponse")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("AssociatedRecordId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("SubmitterName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SubmitterParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("SubmitterRole")
                        .HasColumnType("integer");

                    b.Property<int?>("SubmitterUserId")
                        .HasColumnType("integer");

                    b.HasKey("AuditLogId");

                    b.HasIndex("SubmitterParticipantId");

                    b.HasIndex("SubmitterUserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CM.Data.Model.AutoText", b =>
                {
                    b.Property<int>("AutoTextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TextContent")
                        .HasColumnType("text");

                    b.Property<int?>("TextOwner")
                        .HasColumnType("integer");

                    b.Property<byte?>("TextPrivacy")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TextStatus")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TextSubType")
                        .HasColumnType("smallint");

                    b.Property<string>("TextTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("TextType")
                        .HasColumnType("smallint");

                    b.HasKey("AutoTextId");

                    b.HasIndex("TextOwner");

                    b.ToTable("AutoTexts");
                });

            modelBuilder.Entity("CM.Data.Model.BulkEmailRecipient", b =>
                {
                    b.Property<int>("BulkEmailRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<Guid>("AssociatedDisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("AssociatedFileNumber")
                        .HasColumnType("integer");

                    b.Property<int>("BulkEmailBatchId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PreferredSendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecipientEmailAddress")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RecipientParticipantId")
                        .HasColumnType("integer");

                    b.HasKey("BulkEmailRecipientId");

                    b.HasIndex("AssociatedDisputeGuid");

                    b.ToTable("BulkEmailRecipients");
                });

            modelBuilder.Entity("CM.Data.Model.CMSArchiveNote", b =>
                {
                    b.Property<int>("CMS_Note_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CMS_Note")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("File_Number")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("CMS_Note_ID");

                    b.ToTable("CMSArchiveNotes");
                });

            modelBuilder.Entity("CM.Data.Model.CMSCorrection", b =>
                {
                    b.Property<int>("ETL_CorrectionRow_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Comment_Submitted_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Comment_Submitter")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("Comment_Type")
                        .HasColumnType("smallint");

                    b.Property<string>("File_Number")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Request_ID")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("ETL_CorrectionRow_ID");

                    b.ToTable("CMSCorrections");
                });

            modelBuilder.Entity("CM.Data.Model.CMSFile", b =>
                {
                    b.Property<int>("ETL_File_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CMS_File_ID")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("File_GUID")
                        .HasColumnType("uuid");

                    b.Property<string>("File_Mime_Type")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("File_Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("File_Number")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("File_Path")
                        .HasColumnType("text");

                    b.Property<int?>("File_Size")
                        .HasColumnType("integer");

                    b.Property<string>("File_Title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("File_Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Submitter")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ETL_File_ID");

                    b.ToTable("CMSFiles");
                });

            modelBuilder.Entity("CM.Data.Model.CMSParticipant", b =>
                {
                    b.Property<int>("ETL_ParticipantRow_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Agent_For")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<byte?>("CMS_Sequence_Number")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("Commercial_landlord")
                        .HasColumnType("smallint");

                    b.Property<string>("Country")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DayTime_Area")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("DayTime_Phone")
                        .HasColumnType("character varying(62)")
                        .HasMaxLength(62);

                    b.Property<string>("Email_Address")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Fax_Area")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Fax_Number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("File_Number")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("First_Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Last_Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MailingAddress")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Other_Area")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Other_Phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Participant_Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Postal_Code")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<byte?>("Preferred")
                        .HasColumnType("smallint");

                    b.Property<string>("Province")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Request_ID")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Street_Address")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Unit")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("ETL_ParticipantRow_ID");

                    b.ToTable("CMSParticipants");
                });

            modelBuilder.Entity("CM.Data.Model.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte?>("ClaimCode")
                        .HasColumnType("smallint");

                    b.Property<int>("ClaimGroupId")
                        .HasColumnType("integer");

                    b.Property<byte?>("ClaimSource")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ClaimStatus")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ClaimStatusReason")
                        .HasColumnType("smallint");

                    b.Property<string>("ClaimTitle")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<byte?>("ClaimType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ClaimId");

                    b.HasIndex("ClaimGroupId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("CM.Data.Model.ClaimDetail", b =>
                {
                    b.Property<int>("ClaimDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ClaimId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("DescriptionBy")
                        .HasColumnType("integer");

                    b.Property<string>("Impact")
                        .HasColumnType("character varying(750)")
                        .HasMaxLength(750);

                    b.Property<bool?>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NoticeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("NoticeMethod")
                        .HasColumnType("smallint");

                    b.Property<string>("WhenAware")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("ClaimDetailId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DescriptionBy");

                    b.ToTable("ClaimDetails");
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroup", b =>
                {
                    b.Property<int>("ClaimGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ClaimGroupId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("ClaimGroups");
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroupParticipant", b =>
                {
                    b.Property<int>("ClaimGroupParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ClaimGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte>("GroupParticipantRole")
                        .HasColumnType("smallint");

                    b.Property<int?>("GroupPrimaryContactId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.HasKey("ClaimGroupParticipantId");

                    b.HasIndex("ClaimGroupId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ClaimGroupParticipants");
                });

            modelBuilder.Entity("CM.Data.Model.CommonFile", b =>
                {
                    b.Property<int>("CommonFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<Guid>("CommonFileGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileDescription")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("FileMimeType")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileTitle")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("FileType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CommonFileId");

                    b.ToTable("CommonFiles");
                });

            modelBuilder.Entity("CM.Data.Model.ConferenceBridge", b =>
                {
                    b.Property<int>("ConferenceBridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte?>("BridgeStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte?>("BridgeType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DialInDescription1")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DialInDescription2")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DialInDescription3")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DialInNumber1")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DialInNumber2")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DialInNumber3")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModeratorCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ParticipantCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("PreferredEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PreferredOwner")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PreferredStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("WebPortalLogin")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.HasKey("ConferenceBridgeId");

                    b.HasIndex("PreferredOwner");

                    b.ToTable("ConferenceBridges");
                });

            modelBuilder.Entity("CM.Data.Model.DataModel", b =>
                {
                    b.Property<int>("ETL_DataRow_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("Abandoned_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Additional_Rent_Increase")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Adjourned_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Applicant_Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Approved_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Arbitrator_Comments")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("Archive")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Cancelled_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Closed_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Conference_Bridge_Number")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cross_App_File_Number")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Cross_Dispute_Issues")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("DMS_File_GUID")
                        .HasColumnType("uuid");

                    b.Property<int?>("DMS_File_Number")
                        .HasColumnType("integer");

                    b.Property<string>("DRO_Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DRO_Location")
                        .HasColumnType("character varying(101)")
                        .HasMaxLength(101);

                    b.Property<string>("DRO_Name")
                        .HasColumnType("character varying(61)")
                        .HasMaxLength(61);

                    b.Property<DateTime?>("DR_Pending_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Date_NTE_Served")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Date_Terminated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Decision_Details")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Decision_Issue_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Decision_Staff_Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Details_of_the_Dispute")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<byte?>("Direct_Request")
                        .HasColumnType("smallint");

                    b.Property<string>("Dispute_Address")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Dispute_City")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Dispute_Codes")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Dispute_Postal_Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Dispute_Province")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<byte?>("Dispute_Status")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Dispute_Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Dispute_Unit_Site")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<byte?>("ETL_FileNum_From_RefNum")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Fee_Recovery_Requested")
                        .HasColumnType("smallint");

                    b.Property<string>("Fee_Refund")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte?>("Fee_Repayment_Ordered")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Fee_Waiver_Requested")
                        .HasColumnType("smallint");

                    b.Property<string>("File_Number")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<byte?>("File_Origin")
                        .HasColumnType("smallint");

                    b.Property<string>("Filing_Fee")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte?>("First_Grounds_For_Review")
                        .HasColumnType("smallint");

                    b.Property<string>("First_Results_Of_Review")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("First_Review_Requested_By")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Hearing_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Hearing_Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Hearing_Location")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<byte?>("Hearing_Pickup")
                        .HasColumnType("smallint");

                    b.Property<string>("Hearing_Time")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<byte?>("Hearing_Type")
                        .HasColumnType("smallint");

                    b.Property<string>("How_It_Was_Served")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<byte?>("Joiner_Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Last_Modified_By")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Last_Modified_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Method_of_Resolution")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Method_of_Service")
                        .HasColumnType("smallint");

                    b.Property<string>("Moderator_Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Monetary_Amount_Awarded")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Monetary_Amount_Requested")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Monetary_Order")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Needs_Update_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("New_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Notes_History")
                        .HasColumnType("text");

                    b.Property<string>("Office_Location")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Online_Cross_App_File_Number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("Order_Effective")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Order_of_Possession")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Order_of_Possession_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Outcome_Commercial_Landlord")
                        .HasColumnType("smallint");

                    b.Property<string>("Parent_File_Number")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Participant_Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RTB_Location")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Ready_To_Pay_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reference_Number")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<byte?>("Rent_Redirection_Ordered")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Reopened_1_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Reopened_2_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Request_ID")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Rescheduled_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Scheduled_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Searchable_Record")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Second_Grounds_For_Review")
                        .HasColumnType("smallint");

                    b.Property<string>("Second_Results_Of_Review")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("Second_Review_Requested_By")
                        .HasColumnType("smallint");

                    b.Property<string>("Sections_Applied")
                        .HasColumnType("character varying(275)")
                        .HasMaxLength(275);

                    b.Property<string>("Service_Code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Special_Requirements")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Submitted_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Submitter")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("Wheelchair_Access")
                        .HasColumnType("smallint");

                    b.HasKey("ETL_DataRow_ID");

                    b.ToTable("CMSData");
                });

            modelBuilder.Entity("CM.Data.Model.Dispute", b =>
                {
                    b.Property<int>("DisputeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("CreationMethod")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CrossAppDisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("CrossAppFileNumber")
                        .HasColumnType("integer");

                    b.Property<byte?>("CrossAppRole")
                        .HasColumnType("smallint");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte?>("DisputeSubType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DisputeType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DisputeUrgency")
                        .HasColumnType("smallint");

                    b.Property<int?>("FileNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialPaymentBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InitialPaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("InitialPaymentMethod")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<byte?>("MigrationSourceOfTruth")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("OriginalNoticeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("OriginalNoticeDelivered")
                        .HasColumnType("boolean");

                    b.Property<int?>("OriginalNoticeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OwnerGuid")
                        .HasColumnType("uuid");

                    b.Property<byte?>("OwnerRole")
                        .HasColumnType("smallint");

                    b.Property<int>("OwnerSystemUserId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PetDamageDepositAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RentPaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("RentPaymentInterval")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SecurityDepositAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("SubmittedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TenancyAddress")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("TenancyAgreementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("TenancyAgreementSignedBy")
                        .HasColumnType("smallint");

                    b.Property<string>("TenancyCity")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TenancyCountry")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TenancyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("TenancyEnded")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TenancyGeozoneId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("TenancyStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TenancyZipPostal")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.HasKey("DisputeId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("CreationMethod");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("FileNumber");

                    b.HasIndex("ModifiedDate");

                    b.HasIndex("OwnerSystemUserId");

                    b.HasIndex("SubmittedDate");

                    b.HasIndex("TenancyAddress");

                    b.HasIndex("TenancyZipPostal");

                    b.ToTable("Disputes");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeFee", b =>
                {
                    b.Property<int>("DisputeFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<decimal?>("AmountDue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FeeDescription")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("FeeType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<byte?>("MethodPaid")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentOverrideCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("PayorId")
                        .HasColumnType("integer");

                    b.HasKey("DisputeFeeId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("DisputeFees");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeHearing", b =>
                {
                    b.Property<int>("DisputeHearingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte>("DisputeHearingRole")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DisputeHearingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("ExternalFileId")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<int>("HearingId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("NoticeConferenceBridgeId")
                        .HasColumnType("integer");

                    b.Property<byte?>("SharedHearingLinkType")
                        .HasColumnType("smallint");

                    b.HasKey("DisputeHearingId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("HearingId");

                    b.HasIndex("NoticeConferenceBridgeId");

                    b.ToTable("DisputeHearings");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeProcessDetail", b =>
                {
                    b.Property<int>("DisputeProcessDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte>("AssociatedProcess")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PreparationDuration")
                        .HasColumnType("integer");

                    b.Property<int?>("ProcessApplicant1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("ProcessApplicant2Id")
                        .HasColumnType("integer");

                    b.Property<byte?>("ProcessComplexity")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProcessDuration")
                        .HasColumnType("integer");

                    b.Property<byte?>("ProcessMethod")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ProcessOutcomeCode")
                        .HasColumnType("smallint");

                    b.Property<string>("ProcessOutcomeDescription")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProcessOutcomeNote")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ProcessOutcomeTitle")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<byte?>("ProcessReasonCode")
                        .HasColumnType("smallint");

                    b.Property<int>("StartDisputeStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("WritingDuration")
                        .HasColumnType("integer");

                    b.HasKey("DisputeProcessDetailId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("ProcessApplicant1Id");

                    b.HasIndex("ProcessApplicant2Id");

                    b.HasIndex("StartDisputeStatusId");

                    b.ToTable("DisputeProcessDetails");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeStatus", b =>
                {
                    b.Property<int>("DisputeStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<byte?>("EvidenceOverride")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("Owner")
                        .HasColumnType("integer");

                    b.Property<byte?>("Process")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Stage")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusNote")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("StatusSetBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DisputeStatusId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("Owner");

                    b.HasIndex("Process");

                    b.HasIndex("Stage");

                    b.HasIndex("Status");

                    b.HasIndex("DisputeGuid", "IsActive")
                        .IsUnique()
                        .HasFilter("\"IsActive\" = true");

                    b.ToTable("DisputeStatuses");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeUser", b =>
                {
                    b.Property<int>("DisputeUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("integer");

                    b.HasKey("DisputeUserId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("DisputeUsers");
                });

            modelBuilder.Entity("CM.Data.Model.EmailAttachment", b =>
                {
                    b.Property<int>("EmailAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte>("AttachmentType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CommonFileId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmailMessageId")
                        .HasColumnType("integer");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EmailAttachmentId");

                    b.HasIndex("CommonFileId");

                    b.HasIndex("EmailMessageId");

                    b.HasIndex("FileId");

                    b.ToTable("EmailAttachments");
                });

            modelBuilder.Entity("CM.Data.Model.EmailMessage", b =>
                {
                    b.Property<int>("EmailMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte>("BodyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailFrom")
                        .IsRequired()
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageGuid")
                        .HasColumnType("uuid");

                    b.Property<byte>("MessageType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PreferedSendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ResponseDueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Retries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte?>("SendStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("SendStatusMessage")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("TextBody")
                        .HasColumnType("text");

                    b.HasKey("EmailMessageId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("CM.Data.Model.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("DefaultRecipientGroup")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReplyEmailAddress")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SubjectLine")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<byte?>("TemplateAccessRoles")
                        .HasColumnType("smallint");

                    b.Property<int?>("TemplateAttachment01")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateAttachment02")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateAttachment03")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateAttachment04")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateDescription")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("TemplateHtml")
                        .HasColumnType("text");

                    b.Property<byte?>("TemplateStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("TemplateTitle")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("TemplateType")
                        .HasColumnType("smallint");

                    b.HasKey("EmailTemplateId");

                    b.HasIndex("TemplateType")
                        .IsUnique();

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("CM.Data.Model.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("FileConsidered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("FileDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FileGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FileMimeType")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("FileOrigin")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("FileOriginId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FilePackageId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("FileReferenced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<byte?>("FileStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("FileTitle")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<byte>("FileType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<bool>("IsDeficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("PublicAccessAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("SubmitterName")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("FileId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("FilePackageId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CM.Data.Model.FileDescription", b =>
                {
                    b.Property<int>("FileDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ClaimId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("DecisionReference")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(750)")
                        .HasMaxLength(750);

                    b.Property<int?>("DescriptionBy")
                        .HasColumnType("integer");

                    b.Property<byte>("DescriptionCategory")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DescriptionCode")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Discussed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte?>("FileMethod")
                        .HasColumnType("smallint");

                    b.Property<byte?>("FileStatus")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("IsDeficientReason")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RemedyId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("FileDescriptionId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DescriptionBy");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("RemedyId");

                    b.ToTable("FileDescriptions");
                });

            modelBuilder.Entity("CM.Data.Model.FilePackage", b =>
                {
                    b.Property<int>("FilePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByAccessCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedParticipantParticipantId")
                        .HasColumnType("integer");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("DisputeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PackageDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PackageDescription")
                        .HasColumnType("character varying(10000)")
                        .HasMaxLength(10000);

                    b.Property<string>("PackageTitle")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("PackageType")
                        .HasColumnType("smallint");

                    b.HasKey("FilePackageId");

                    b.HasIndex("CreatedParticipantParticipantId");

                    b.HasIndex("DisputeId");

                    b.ToTable("FilePackages");
                });

            modelBuilder.Entity("CM.Data.Model.FilePackageService", b =>
                {
                    b.Property<int>("FilePackageServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FilePackageId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsServed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherParticipantName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("OtherParticipantRole")
                        .HasColumnType("smallint");

                    b.Property<string>("OtherParticipantTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProofFileDescriptionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ServedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceComment")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("ServiceDateUsed")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ServiceMethod")
                        .HasColumnType("smallint");

                    b.HasKey("FilePackageServiceId");

                    b.HasIndex("FilePackageId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProofFileDescriptionId");

                    b.HasIndex("ServedBy");

                    b.ToTable("FilePackageServices");
                });

            modelBuilder.Entity("CM.Data.Model.Hearing", b =>
                {
                    b.Property<int>("HearingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ConferenceBridgeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("HearingComplexity")
                        .HasColumnType("smallint");

                    b.Property<string>("HearingDetails")
                        .HasColumnType("character varying(1500)")
                        .HasMaxLength(1500);

                    b.Property<int?>("HearingDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("HearingEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HearingLocation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("HearingMethod")
                        .HasColumnType("smallint");

                    b.Property<string>("HearingNote")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("HearingOwner")
                        .HasColumnType("integer");

                    b.Property<byte?>("HearingPriority")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("HearingStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("HearingSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("HearingType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LocalEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LocalStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherStaffParticipants")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("character varying(1500)")
                        .HasMaxLength(1500);

                    b.Property<int?>("StaffParticipant1")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffParticipant2")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffParticipant3")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffParticipant4")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffParticipant5")
                        .HasColumnType("integer");

                    b.Property<bool?>("UseCustomSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("UseSpecialInstructions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("HearingId");

                    b.HasIndex("ConferenceBridgeId");

                    b.HasIndex("HearingOwner");

                    b.HasIndex("StaffParticipant1");

                    b.HasIndex("StaffParticipant2");

                    b.HasIndex("StaffParticipant3");

                    b.HasIndex("StaffParticipant4");

                    b.HasIndex("StaffParticipant5");

                    b.ToTable("Hearings");
                });

            modelBuilder.Entity("CM.Data.Model.HearingAuditLog", b =>
                {
                    b.Property<int>("HearingAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ConferenceBridgeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte?>("DisputeHearingRole")
                        .HasColumnType("smallint");

                    b.Property<int>("HearingChangeType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("HearingEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HearingId")
                        .HasColumnType("integer");

                    b.Property<int>("HearingOwner")
                        .HasColumnType("integer");

                    b.Property<byte?>("HearingPriority")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("HearingStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("HearingSubType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("HearingType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LocalEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LocalStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("SharedHearingLinkType")
                        .HasColumnType("smallint");

                    b.HasKey("HearingAuditLogId");

                    b.HasIndex("ConferenceBridgeId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("HearingId");

                    b.HasIndex("HearingOwner");

                    b.ToTable("HearingAuditLogs");
                });

            modelBuilder.Entity("CM.Data.Model.HearingImport", b =>
                {
                    b.Property<int>("HearingImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ImportEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ImportFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ImportNote")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ImportOfficeId")
                        .HasColumnType("integer");

                    b.Property<string>("ImportProcessLog")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ImportStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("ImportStatus")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("HearingImportId");

                    b.HasIndex("ImportFileId");

                    b.ToTable("HearingImports");
                });

            modelBuilder.Entity("CM.Data.Model.HearingParticipation", b =>
                {
                    b.Property<int>("HearingParticipationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("HearingId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameAbbreviation")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<byte?>("OtherParticipantAssociation")
                        .HasColumnType("smallint");

                    b.Property<string>("OtherParticipantName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OtherParticipantTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<string>("ParticipationComment")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<byte?>("ParticipationStatus")
                        .HasColumnType("smallint");

                    b.HasKey("HearingParticipationId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("HearingId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("HearingParticipations");
                });

            modelBuilder.Entity("CM.Data.Model.IntakeQuestion", b =>
                {
                    b.Property<int>("IntakeQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<byte>("GroupId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QuestionAnswer")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("IntakeQuestionId");

                    b.HasIndex("DisputeGuid", "QuestionName")
                        .IsUnique();

                    b.ToTable("IntakeQuestions");
                });

            modelBuilder.Entity("CM.Data.Model.InternalUserProfile", b =>
                {
                    b.Property<int>("InternalUserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InternalUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProfileDecision")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProfileNickname")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("integer");

                    b.Property<byte?>("ProfileStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<int?>("SignatureFileId")
                        .HasColumnType("integer");

                    b.HasKey("InternalUserProfileId");

                    b.HasIndex("InternalUserId");

                    b.HasIndex("ProfilePictureId");

                    b.HasIndex("SignatureFileId");

                    b.ToTable("InternalUserProfiles");
                });

            modelBuilder.Entity("CM.Data.Model.InternalUserRole", b =>
                {
                    b.Property<int>("InternalUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("RoleGroupId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RoleSubtypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("InternalUserRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("InternalUserRoles");
                });

            modelBuilder.Entity("CM.Data.Model.LinkedFile", b =>
                {
                    b.Property<int>("LinkedFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("FileDescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LinkedFileId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("FileDescriptionId");

                    b.HasIndex("FileId");

                    b.ToTable("LinkedFiles");
                });

            modelBuilder.Entity("CM.Data.Model.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ExpectedDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("MaintenanceTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OverrideKey")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("SystemId")
                        .HasColumnType("smallint");

                    b.HasKey("MaintenanceId");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("CM.Data.Model.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("CreatorGroupRoleId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("character varying(1500)")
                        .HasMaxLength(1500);

                    b.Property<int?>("NoteLinkId")
                        .HasColumnType("integer");

                    b.Property<byte>("NoteLinkedTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("NoteStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("NoteType")
                        .HasColumnType("smallint");

                    b.HasKey("NoteId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CM.Data.Model.Notice", b =>
                {
                    b.Property<int>("NoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ConferenceBridgeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("HearingId")
                        .HasColumnType("integer");

                    b.Property<byte?>("HearingType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInitialDisputeNotice")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("NoticeAssociatedTo")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("NoticeDeliveredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("NoticeDeliveredTo")
                        .HasColumnType("integer");

                    b.Property<byte?>("NoticeDeliveryMethod")
                        .HasColumnType("smallint");

                    b.Property<int?>("NoticeFile1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeFile2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeFile3Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeFile4Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeFile5Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeFileDescriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("NoticeHtmlForPdf")
                        .HasColumnType("text");

                    b.Property<string>("NoticeSpecialInstructions")
                        .HasColumnType("character varying(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("NoticeTitle")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("NoticeType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("NoticeVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<int?>("ParentNoticeId")
                        .HasColumnType("integer");

                    b.HasKey("NoticeId");

                    b.HasIndex("ConferenceBridgeId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("HearingId");

                    b.HasIndex("NoticeDeliveredTo");

                    b.HasIndex("NoticeFile1Id");

                    b.HasIndex("NoticeFile2Id");

                    b.HasIndex("NoticeFile3Id");

                    b.HasIndex("NoticeFile4Id");

                    b.HasIndex("NoticeFile5Id");

                    b.HasIndex("NoticeFileDescriptionId");

                    b.HasIndex("ParentNoticeId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("CM.Data.Model.NoticeService", b =>
                {
                    b.Property<int>("NoticeServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsServed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NoticeId")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeServiceFile1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeServiceFile2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeServiceFile3Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeServiceFile4Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NoticeServiceFile5Id")
                        .HasColumnType("integer");

                    b.Property<byte?>("OtherParticipantRole")
                        .HasColumnType("smallint");

                    b.Property<string>("OtherParticpantTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProofFileDescriptionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ServedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceComment")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("ServiceDateUsed")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ServiceMethod")
                        .HasColumnType("smallint");

                    b.HasKey("NoticeServiceId");

                    b.HasIndex("NoticeId");

                    b.HasIndex("NoticeServiceFile1Id");

                    b.HasIndex("NoticeServiceFile2Id");

                    b.HasIndex("NoticeServiceFile3Id");

                    b.HasIndex("NoticeServiceFile4Id");

                    b.HasIndex("NoticeServiceFile5Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProofFileDescriptionId");

                    b.ToTable("NoticeServices");
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocContent", b =>
                {
                    b.Property<int>("OutcomeDocContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte?>("ContentStatus")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ContentSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ContentType")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OutcomeDocFileId")
                        .HasColumnType("integer");

                    b.Property<string>("StoredContent")
                        .HasColumnType("text");

                    b.HasKey("OutcomeDocContentId");

                    b.HasIndex("OutcomeDocFileId");

                    b.ToTable("OutcomeDocContents");
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocDelivery", b =>
                {
                    b.Property<int>("OutcomeDocDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool?>("ConfirmedReceived")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryComment")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("DeliveryMethod")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DeliveryPriority")
                        .HasColumnType("smallint");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OutcomeDocFileId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ReadyForDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReadyForDeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OutcomeDocDeliveryId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("OutcomeDocFileId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OutcomeDocDeliveries");
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocFile", b =>
                {
                    b.Property<int>("OutcomeDocFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FileAcronym")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("FileDescription")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<byte?>("FileSource")
                        .HasColumnType("smallint");

                    b.Property<byte?>("FileStatus")
                        .HasColumnType("smallint");

                    b.Property<byte?>("FileSubStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("FileTitle")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("FileType")
                        .HasColumnType("smallint");

                    b.Property<string>("InternalFileComment")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OutcomeDocGroupId")
                        .HasColumnType("integer");

                    b.Property<bool?>("VisibleToPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("OutcomeDocFileId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("FileId");

                    b.HasIndex("OutcomeDocGroupId");

                    b.ToTable("OutcomeDocFiles");
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocGroup", b =>
                {
                    b.Property<int>("OutcomeDocGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DocCompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("DocGroupSubType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DocGroupType")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DocStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("DocStatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OutcomeDocGroupId");

                    b.HasIndex("DisputeGuid");

                    b.ToTable("OutcomeDocGroups");
                });

            modelBuilder.Entity("CM.Data.Model.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("AcceptedTOU")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AcceptedTOUDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AccessCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(125)")
                        .HasMaxLength(125);

                    b.Property<string>("BusinessContactFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BusinessContactLastName")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("BusinessName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Fax")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSubService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("MailAddres")
                        .HasColumnType("character varying(125)")
                        .HasMaxLength(125);

                    b.Property<string>("MailCity")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MailCountry")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MailPostalZip")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MailProvinceState")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameAbbreviation")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<bool?>("NoEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<byte?>("PackageDeliveryMethod")
                        .HasColumnType("smallint");

                    b.Property<byte>("ParticipantStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte?>("ParticipantType")
                        .HasColumnType("smallint");

                    b.Property<string>("PostalZip")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<byte?>("PrimaryContactMethod")
                        .HasColumnType("smallint");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PrimaryPhoneExtension")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<byte?>("PrimaryPhoneType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("PrimaryPhoneVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ProvinceState")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("ProvinceStateId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SecondaryContactMethod")
                        .HasColumnType("smallint");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SecondaryPhoneExtension")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<byte?>("SecondaryPhoneType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("SecondaryPhoneVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("SystemUserId")
                        .HasColumnType("integer");

                    b.HasKey("ParticipantId");

                    b.HasIndex("AccessCode");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("SystemUserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("CM.Data.Model.PaymentTransaction", b =>
                {
                    b.Property<int>("PaymentTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CardType")
                        .HasColumnType("char(2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayMsg")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DisputeFeeid")
                        .HasColumnType("integer");

                    b.Property<byte?>("FeeWaiverCitySize")
                        .HasColumnType("smallint");

                    b.Property<bool?>("FeeWaiverHardship")
                        .HasColumnType("boolean");

                    b.Property<string>("FeeWaiverHardshipDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("FeeWaiverIncome")
                        .HasColumnType("decimal(10,2)");

                    b.Property<byte?>("FeeWaiverTenantsFamily")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfficePaymentIdir")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentNote")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("PaymentProvider")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PaymentStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<byte?>("PaymentVerified")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PaymentVerifyRetries")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ReconcileDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("ReconcileStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("TransactionBy")
                        .HasColumnType("integer");

                    b.Property<byte>("TransactionMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue(null);

                    b.Property<byte?>("TransactionSiteSource")
                        .HasColumnType("smallint");

                    b.Property<bool>("TrnApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("TrnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TrnId")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("TrnReqDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TrnResponse")
                        .HasColumnType("integer");

                    b.Property<string>("TrnType")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.HasKey("PaymentTransactionId");

                    b.HasIndex("DisputeFeeid");

                    b.HasIndex("TransactionBy");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("CM.Data.Model.Remedy", b =>
                {
                    b.Property<int>("RemedyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AwardDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("AwardedAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("AwardedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AwardedDaysAfterService")
                        .HasColumnType("integer");

                    b.Property<int>("ClaimId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("RemedySource")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RemedyStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("RemedyStatusReason")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("RemedyStatusReasonCode")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RemedySubStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("RemedyTitle")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<byte?>("RemedyType")
                        .HasColumnType("smallint");

                    b.HasKey("RemedyId");

                    b.HasIndex("ClaimId");

                    b.ToTable("Remedies");
                });

            modelBuilder.Entity("CM.Data.Model.RemedyDetail", b =>
                {
                    b.Property<int>("RemedyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("DescriptionBy")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RemedyId")
                        .HasColumnType("integer");

                    b.HasKey("RemedyDetailId");

                    b.HasIndex("DescriptionBy");

                    b.HasIndex("RemedyId");

                    b.ToTable("RemedyDetails");
                });

            modelBuilder.Entity("CM.Data.Model.ServiceOffice", b =>
                {
                    b.Property<int>("ServiceOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfficeAbbreviation")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("OfficeDescription")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("OfficeStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("OfficeTimezone")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("OfficeTimezoneUTCOffset")
                        .HasColumnType("smallint");

                    b.HasKey("ServiceOfficeId");

                    b.ToTable("ServiceOffices");
                });

            modelBuilder.Entity("CM.Data.Model.SiteVersion", b =>
                {
                    b.Property<int>("SiteVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailGeneratorVersion")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("EmailGeneratorVersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailNotificationVersion")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("EmailNotificationVersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MidTierVersion")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("MidTierVersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PDFVersion")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PDFVersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReleaseDetails")
                        .HasColumnType("character varying(2500)")
                        .HasMaxLength(2500);

                    b.Property<string>("ReleaseNumber")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<byte>("TokenMethod")
                        .HasColumnType("smallint");

                    b.Property<string>("UIVersion")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UIVersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SiteVersionId");

                    b.ToTable("SiteVersion");
                });

            modelBuilder.Entity("CM.Data.Model.SubstitutedService", b =>
                {
                    b.Property<int>("SubstitutedServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FailedMethod1Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FailedMethod1Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("FailedMethod1FileDescId")
                        .HasColumnType("integer");

                    b.Property<string>("FailedMethod1Note")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FailedMethod1Specifics")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("FailedMethod1Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("FailedMethod2Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FailedMethod2Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("FailedMethod2FileDescId")
                        .HasColumnType("integer");

                    b.Property<string>("FailedMethod2Note")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FailedMethod2Specifics")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("FailedMethod2Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("FailedMethod3Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FailedMethod3Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("FailedMethod3FileDescId")
                        .HasColumnType("integer");

                    b.Property<string>("FailedMethod3Note")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FailedMethod3Specifics")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("FailedMethod3Type")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte?>("IsRespondentAvoiding")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherFailedMethodDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("OutcomeDocumentFileId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestDocOtherDescription")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("RequestDocType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RequestMethodFileDescId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestNotes")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("RequestStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("RequestedMethodDescription")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RequestedMethodJustification")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<byte?>("RequestingServiceDirections")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RequestingTimeExtension")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RequestingTimeExtensionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RespondentAvoidingDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ServiceByParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceToParticipantId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubServiceApprovedById")
                        .HasColumnType("integer");

                    b.Property<byte?>("SubServiceDocType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SubServiceEffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SubServiceExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubServiceInstructions")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("SubServiceOtherDescription")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SubServiceTitle")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("SubstitutedServiceId");

                    b.HasIndex("FailedMethod1FileDescId");

                    b.HasIndex("FailedMethod2FileDescId");

                    b.HasIndex("FailedMethod3FileDescId");

                    b.HasIndex("OutcomeDocumentFileId");

                    b.HasIndex("RequestMethodFileDescId");

                    b.HasIndex("ServiceByParticipantId");

                    b.HasIndex("ServiceToParticipantId");

                    b.HasIndex("SubServiceApprovedById");

                    b.ToTable("SubstitutedServices");
                });

            modelBuilder.Entity("CM.Data.Model.SystemSettings", b =>
                {
                    b.Property<int>("SystemSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("SystemSettingsId");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("CM.Data.Model.SystemUser", b =>
                {
                    b.Property<int>("SystemUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool?>("AcceptsTextMessages")
                        .HasColumnType("boolean");

                    b.Property<string>("AccountEmail")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AccountMobile")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("AdminAccess")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Scheduler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ServiceOfficeId")
                        .HasColumnType("integer");

                    b.Property<int>("SystemUserRoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("SystemUserId");

                    b.HasIndex("ServiceOfficeId");

                    b.HasIndex("SystemUserRoleId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("CM.Data.Model.SystemUserRole", b =>
                {
                    b.Property<int>("SystemUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("RoleDescritption")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SessionDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(900);

                    b.HasKey("SystemUserRoleId");

                    b.ToTable("SystemUserRoles");
                });

            modelBuilder.Entity("CM.Data.Model.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateTaskCompleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DisputeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("TaskDueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TaskLinkId")
                        .HasColumnType("integer");

                    b.Property<byte>("TaskLinkedTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<int?>("TaskOwnerId")
                        .HasColumnType("integer");

                    b.Property<byte>("TaskPriority")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TaskStatus")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TaskSubType")
                        .HasColumnType("smallint");

                    b.Property<string>("TaskText")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<byte?>("TaskType")
                        .HasColumnType("smallint");

                    b.HasKey("TaskId");

                    b.HasIndex("DisputeGuid");

                    b.HasIndex("TaskOwnerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CM.Data.Model.UserToken", b =>
                {
                    b.Property<int>("UserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SystemUserGuid")
                        .HasColumnType("uuid");

                    b.Property<int?>("SystemUserId")
                        .HasColumnType("integer");

                    b.HasKey("UserTokenId");

                    b.HasIndex("AuthToken");

                    b.HasIndex("SystemUserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CM.Data.Model.Amendment", b =>
                {
                    b.HasOne("CM.Data.Model.FileDescription", "AmendFileDescription")
                        .WithMany("Amendments")
                        .HasForeignKey("AmendFileDescriptionId");

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("Amendments")
                        .HasForeignKey("AmendmentSubmitterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Amendments")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Notice", "Notice")
                        .WithMany("Amendments")
                        .HasForeignKey("NoticeId");
                });

            modelBuilder.Entity("CM.Data.Model.AuditLog", b =>
                {
                    b.HasOne("CM.Data.Model.Participant", "SubmitterParticipant")
                        .WithMany("AuditLogs")
                        .HasForeignKey("SubmitterParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("AuditLogs")
                        .HasForeignKey("SubmitterUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.AutoText", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("AutoTexts")
                        .HasForeignKey("TextOwner")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.BulkEmailRecipient", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("BulkEmailRecipients")
                        .HasForeignKey("AssociatedDisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.Claim", b =>
                {
                    b.HasOne("CM.Data.Model.ClaimGroup", "ClaimGroup")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.ClaimDetail", b =>
                {
                    b.HasOne("CM.Data.Model.Claim", "Claim")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("ClaimId");

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("DescriptionBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroup", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("ClaimGroups")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.ClaimGroupParticipant", b =>
                {
                    b.HasOne("CM.Data.Model.ClaimGroup", "ClaimGroup")
                        .WithMany("ClaimGroupParticipants")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("ClaimGroupParticipants")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("ClaimGroupParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.ConferenceBridge", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("ConferenceBridges")
                        .HasForeignKey("PreferredOwner")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.Dispute", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("Disputes")
                        .HasForeignKey("OwnerSystemUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.DisputeFee", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeFees")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.DisputeHearing", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeHearings")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Hearing", "Hearing")
                        .WithMany("DisputeHearings")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.ConferenceBridge", "NoticeConferenceBridge")
                        .WithMany("DisputeHearings")
                        .HasForeignKey("NoticeConferenceBridgeId");
                });

            modelBuilder.Entity("CM.Data.Model.DisputeProcessDetail", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeProcessDetails")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant1")
                        .WithMany("DisputeProcessDetail1")
                        .HasForeignKey("ProcessApplicant1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Participant", "Participant2")
                        .WithMany("DisputeProcessDetail2")
                        .HasForeignKey("ProcessApplicant2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.DisputeStatus", "DisputeStatus")
                        .WithMany("DisputeProcessDetails")
                        .HasForeignKey("StartDisputeStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.DisputeStatus", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeStatuses")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.DisputeUser", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("DisputeUsers")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("DisputeUsers")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("DisputeUsers")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.EmailAttachment", b =>
                {
                    b.HasOne("CM.Data.Model.CommonFile", "CommonFile")
                        .WithMany("EmailAttachments")
                        .HasForeignKey("CommonFileId");

                    b.HasOne("CM.Data.Model.EmailMessage", "EmailMessage")
                        .WithMany("EmailAttachments")
                        .HasForeignKey("EmailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.File", "File")
                        .WithMany("EmailAttachments")
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("CM.Data.Model.EmailMessage", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("EmailMessages")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("EmailMessages")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("CM.Data.Model.File", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Files")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.FilePackage", "FilePackage")
                        .WithMany("Files")
                        .HasForeignKey("FilePackageId");
                });

            modelBuilder.Entity("CM.Data.Model.FileDescription", b =>
                {
                    b.HasOne("CM.Data.Model.Claim", "Claim")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("ClaimId");

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("DescriptionBy");

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Remedy", "Remedy")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("RemedyId");
                });

            modelBuilder.Entity("CM.Data.Model.FilePackage", b =>
                {
                    b.HasOne("CM.Data.Model.Participant", "CreatedParticipant")
                        .WithMany("FilePackages")
                        .HasForeignKey("CreatedParticipantParticipantId");

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("FilePackages")
                        .HasForeignKey("DisputeId");
                });

            modelBuilder.Entity("CM.Data.Model.FilePackageService", b =>
                {
                    b.HasOne("CM.Data.Model.FilePackage", "FilePackage")
                        .WithMany("FilePackageServices")
                        .HasForeignKey("FilePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("FilePackageServices")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.FileDescription", "ProofFileDescription")
                        .WithMany()
                        .HasForeignKey("ProofFileDescriptionId");

                    b.HasOne("CM.Data.Model.Participant", "ServedParticipant")
                        .WithMany("ServedFilePackageServices")
                        .HasForeignKey("ServedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.Hearing", b =>
                {
                    b.HasOne("CM.Data.Model.ConferenceBridge", "ConferenceBridge")
                        .WithMany()
                        .HasForeignKey("ConferenceBridgeId");

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("Hearings")
                        .HasForeignKey("HearingOwner")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser1")
                        .WithMany("Hearings1")
                        .HasForeignKey("StaffParticipant1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser2")
                        .WithMany("Hearings2")
                        .HasForeignKey("StaffParticipant2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser3")
                        .WithMany("Hearings3")
                        .HasForeignKey("StaffParticipant3")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser4")
                        .WithMany("Hearings4")
                        .HasForeignKey("StaffParticipant4")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser5")
                        .WithMany("Hearings5")
                        .HasForeignKey("StaffParticipant5")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.HearingAuditLog", b =>
                {
                    b.HasOne("CM.Data.Model.ConferenceBridge", "ConferenceBridge")
                        .WithMany("HearingAuditLogs")
                        .HasForeignKey("ConferenceBridgeId");

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("HearingAuditLogs")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Hearing", "Hearing")
                        .WithMany("HearingAuditLogs")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("HearingAuditLogs")
                        .HasForeignKey("HearingOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.HearingImport", b =>
                {
                    b.HasOne("CM.Data.Model.CommonFile", "ImportFile")
                        .WithMany("HearingImports")
                        .HasForeignKey("ImportFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.HearingParticipation", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("HearingParticipations")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Hearing", "Hearing")
                        .WithMany("HearingParticipations")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("HearingParticipations")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("CM.Data.Model.IntakeQuestion", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("IntakeQuestions")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.InternalUserProfile", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("InternalUserProfiles")
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.CommonFile", "CommonFileProfilePic")
                        .WithMany("InternalUserProfilesProfilePic")
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.CommonFile", "CommonFileSignature")
                        .WithMany("InternalUserProfilesSignature")
                        .HasForeignKey("SignatureFileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.InternalUserRole", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("InternalUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.LinkedFile", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("LinkedFiles")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.FileDescription", "FileDescription")
                        .WithMany("LinkedFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.File", "File")
                        .WithMany("LinkedFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.Note", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Notes")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.Notice", b =>
                {
                    b.HasOne("CM.Data.Model.ConferenceBridge", "ConferenceBridge")
                        .WithMany("Notices")
                        .HasForeignKey("ConferenceBridgeId");

                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Notices")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Hearing", "Hearing")
                        .WithMany()
                        .HasForeignKey("HearingId");

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("Notices")
                        .HasForeignKey("NoticeDeliveredTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File1")
                        .WithMany("Notices1")
                        .HasForeignKey("NoticeFile1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File2")
                        .WithMany("Notices2")
                        .HasForeignKey("NoticeFile2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File3")
                        .WithMany("Notices3")
                        .HasForeignKey("NoticeFile3Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File4")
                        .WithMany("Notices4")
                        .HasForeignKey("NoticeFile4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File5")
                        .WithMany("Notices5")
                        .HasForeignKey("NoticeFile5Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.FileDescription", "NoticeFileDescription")
                        .WithMany("Notices")
                        .HasForeignKey("NoticeFileDescriptionId");

                    b.HasOne("CM.Data.Model.Notice", "ParentNotice")
                        .WithMany()
                        .HasForeignKey("ParentNoticeId");
                });

            modelBuilder.Entity("CM.Data.Model.NoticeService", b =>
                {
                    b.HasOne("CM.Data.Model.Notice", "Notice")
                        .WithMany("NoticeServices")
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.File", "File1")
                        .WithMany("NoticeServices1")
                        .HasForeignKey("NoticeServiceFile1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File2")
                        .WithMany("NoticeServices2")
                        .HasForeignKey("NoticeServiceFile2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File3")
                        .WithMany("NoticeServices3")
                        .HasForeignKey("NoticeServiceFile3Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File4")
                        .WithMany("NoticeServices4")
                        .HasForeignKey("NoticeServiceFile4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.File", "File5")
                        .WithMany("NoticeServices5")
                        .HasForeignKey("NoticeServiceFile5Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("NoticeServices")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.FileDescription", "ProofFileDescription")
                        .WithMany("NoticeServices")
                        .HasForeignKey("ProofFileDescriptionId");
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocContent", b =>
                {
                    b.HasOne("CM.Data.Model.OutcomeDocFile", "OutcomeDocFile")
                        .WithMany("OutcomeDocContents")
                        .HasForeignKey("OutcomeDocFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocDelivery", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("OutcomeDocDocDeliveries")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.OutcomeDocFile", "OutcomeDocFile")
                        .WithMany("OutcomeDocDeliveries")
                        .HasForeignKey("OutcomeDocFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("OutcomeDocDeliveries")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocFile", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("OutcomeDocFiles")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.File", "File")
                        .WithMany("OutcomeDocFiles")
                        .HasForeignKey("FileId");

                    b.HasOne("CM.Data.Model.OutcomeDocGroup", "OutcomeDocGroup")
                        .WithMany("OutcomeDocFiles")
                        .HasForeignKey("OutcomeDocGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.OutcomeDocGroup", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("OutcomeDocGroups")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.Participant", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Participants")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("Participants")
                        .HasForeignKey("SystemUserId");
                });

            modelBuilder.Entity("CM.Data.Model.PaymentTransaction", b =>
                {
                    b.HasOne("CM.Data.Model.DisputeFee", "DisputeFee")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("DisputeFeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("TransactionBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.Remedy", b =>
                {
                    b.HasOne("CM.Data.Model.Claim", "Claim")
                        .WithMany("Remedies")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.RemedyDetail", b =>
                {
                    b.HasOne("CM.Data.Model.Participant", "Participant")
                        .WithMany("RemedyDetails")
                        .HasForeignKey("DescriptionBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Remedy", "Remedy")
                        .WithMany("RemedyDetails")
                        .HasForeignKey("RemedyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.SubstitutedService", b =>
                {
                    b.HasOne("CM.Data.Model.FileDescription", "FailedMethod1FileDesc")
                        .WithMany()
                        .HasForeignKey("FailedMethod1FileDescId");

                    b.HasOne("CM.Data.Model.FileDescription", "FailedMethod2FileDesc")
                        .WithMany()
                        .HasForeignKey("FailedMethod2FileDescId");

                    b.HasOne("CM.Data.Model.FileDescription", "FailedMethod3FileDesc")
                        .WithMany()
                        .HasForeignKey("FailedMethod3FileDescId");

                    b.HasOne("CM.Data.Model.OutcomeDocFile", "OutcomeDocumentFile")
                        .WithMany()
                        .HasForeignKey("OutcomeDocumentFileId");

                    b.HasOne("CM.Data.Model.FileDescription", "RequestMethodFileDesc")
                        .WithMany()
                        .HasForeignKey("RequestMethodFileDescId");

                    b.HasOne("CM.Data.Model.Participant", "ServiceByParticipant")
                        .WithMany()
                        .HasForeignKey("ServiceByParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.Participant", "ServiceToParticipant")
                        .WithMany()
                        .HasForeignKey("ServiceToParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.SystemUser", "SubServiceApprovedBy")
                        .WithMany()
                        .HasForeignKey("SubServiceApprovedById");
                });

            modelBuilder.Entity("CM.Data.Model.SystemUser", b =>
                {
                    b.HasOne("CM.Data.Model.ServiceOffice", "ServiceOffice")
                        .WithMany("SystemUsers")
                        .HasForeignKey("ServiceOfficeId");

                    b.HasOne("CM.Data.Model.SystemUserRole", "SystemUserRole")
                        .WithMany()
                        .HasForeignKey("SystemUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CM.Data.Model.Task", b =>
                {
                    b.HasOne("CM.Data.Model.Dispute", "Dispute")
                        .WithMany("Tasks")
                        .HasForeignKey("DisputeGuid")
                        .HasPrincipalKey("DisputeGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CM.Data.Model.UserToken", b =>
                {
                    b.HasOne("CM.Data.Model.SystemUser", "SystemUser")
                        .WithMany()
                        .HasForeignKey("SystemUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
